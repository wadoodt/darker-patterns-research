// This file should mirror the types in src/types, but use Timestamp from firebase-admin/firestore.
// This ensures type consistency between client-side and Firebase Functions.

import type { Timestamp as FirebaseAdminTimestamp } from 'firebase-admin/firestore';

export interface DPOEntry {
  id: string;
  instruction: string;
  prompt?: string;
  acceptedResponse: string;
  rejectedResponse: string;
  categories: string[];
  discussion?: string;
  reviewCount: number;
  targetReviewCount?: number;
  previousReviewCountForFullyReviewedCheck?: number; // Used in functions to avoid re-counting fully reviewed
  lastReviewedAt?: FirebaseAdminTimestamp | Date;
  createdAt?: FirebaseAdminTimestamp | Date;
  isFlaggedCount?: number;
  lastFlaggedAt?: FirebaseAdminTimestamp | Date;

  // Fields for "Archive & Create New Version" strategy
  isArchived?: boolean;
  archivedAt?: FirebaseAdminTimestamp | Date;
  originalEntryId?: string;
  supersededByEntryId?: string;
  viewCount?: number;
}

export interface DemographicData {
  ageGroup?: string | null;
  gender?: string | null;
  genderOther?: string | null;
  educationLevel?: string | null;
  educationOther?: string | null;
  fieldOfExpertise?: string | null;
  expertiseOther?: string | null;
  aiFamiliarity?: string | null;
}

export interface EvaluationData {
  id?: string; // Firestore document ID, added during fetch client-side
  participantSessionUid: string;
  dpoEntryId: string;
  categories: string[];
  chosenOptionKey: 'A' | 'B';
  wasChosenActuallyAccepted: boolean;
  agreementRating: number;
  comment?: string | null;
  timeSpentMs: number;
  submittedAt: FirebaseAdminTimestamp | Date; // Use FirebaseAdminTimestamp for Functions
}

export interface ParticipantSession {
  participationType: 'email' | 'anonymous';
  email?: string | null;
  termsAgreed: boolean;
  demographics: DemographicData | null;
  assignedEntriesCount: number;
  completedEntriesCount: number;
  totalTimeSpentMsOnSurvey?: number;
  optedInForPaper?: boolean;
  createdAt?: FirebaseAdminTimestamp | Date; // Made optional as it's set if not exists
  surveyCompletedAt?: FirebaseAdminTimestamp | Date | null;
}

export interface ParticipantFlag {
  id?: string; // Firestore document ID
  participantSessionUid: string;
  reason: string;
  comment?: string | null;
  flaggedAt: FirebaseAdminTimestamp | Date; // Use FirebaseAdminTimestamp
  categories?: string[]; // Optional: store category for context/filtering flags
}

export interface AdminSettingsData {
  isSurveyPubliclyEnabled?: boolean;
  isSurveyPermanentlyClosed?: boolean;
  minTargetReviewsPerEntry?: number;
  landingPageUpdates?: LandingUpdate[]; // Assuming LandingUpdate is also defined here or imported
  lastUpdatedAt?: FirebaseAdminTimestamp;
}

export interface OverviewStats {
  totalEvaluations: number;
  totalEntriesInDataset: number;
  agreementRate: number;
  fullyReviewedEntriesCount: number;
  totalAnnotatedEntries: number;
  totalEntriesWithUnresolvedFlags: number;
  lastUpdatedAt: FirebaseAdminTimestamp;
}

export interface LandingUpdate {
  id: string;
  title: string;
  date: string | FirebaseAdminTimestamp; // string from form, Timestamp in DB
  description: string;
  iconName?: string;
  createdAt?: FirebaseAdminTimestamp;
}

// For `details` in ActivityLogItem (mirrors src/types/stats.ts suggestion):
// Discriminated union for better type safety of details based on eventType
export type EvaluationSubmittedDetails = {
  agreementRating: number;
  chosenOptionKey: 'A' | 'B';
  wasResearcherAgreement: boolean;
};
type ParticipantSessionStartedDetails = { participationType: 'email' | 'anonymous'; emailProvided: boolean };
type ParticipantFlagSubmittedDetails = { reason: string; commentProvided: boolean };
type DpoEntryDeletedDetails = { deletedBy: string };

export type ActivityLogDetails =
  | EvaluationSubmittedDetails
  | ParticipantSessionStartedDetails
  | ParticipantFlagSubmittedDetails
  | DpoEntryDeletedDetails;

export interface ActivityLogItemFc {
  id?: string; // Auto-generated by Firestore if not provided
  timestamp: FirebaseAdminTimestamp;
  eventType: string;
  participantSessionUid?: string;
  dpoEntryId?: string;
  details?: ActivityLogDetails;
  displayText: string;
  iconName?: string;
  actionLink?: string;
  actionText?: string;
}

// Types for Entry Details, mirroring src/types/entryDetails.ts
// Dummy interfaces for optional fields in EntryWithDetails
export type DemographicsSummary = Record<string, never>;
export interface ResponseAggregates {
  ratingDistribution?: {
    '1_star'?: number;
    '2_star'?: number;
    '3_star'?: number;
    '4_star'?: number;
    '5_star'?: number;
  };
  commentSubmissions?: number;
  commentSubmissionRatePercent?: number;
  overallAnnotationPercent?: number;
  min10ReviewsPercent?: number;
  unresolvedFlagsPercent?: number;
  lastUpdatedAt?: FirebaseAdminTimestamp;
}

export interface EntryAnalytics {
  views: number;
  flags: number;
  totalEvaluations: number;
  correctness: number;
  averageRating: number;
  ratingDistribution: Record<number, number>;
  categoryDistribution: Record<string, number>;
}

export interface EntryEvaluationDetail {
  id?: string;
  agreementRating: number;
  comment?: string | null;
  categories: string[];
  submittedAt: Date;
  chosenOptionKey: 'A' | 'B';
  wasChosenActuallyAccepted: boolean;
}

export interface EntryWithDetails extends Omit<DPOEntry, 'createdAt' | 'lastReviewedAt'> {
  createdAt: Date;
  lastReviewedAt?: Date;
  analytics: EntryAnalytics;
  evaluations?: EntryEvaluationDetail[];
  demographics?: DemographicsSummary;
  responseAggregates?: ResponseAggregates;
}
